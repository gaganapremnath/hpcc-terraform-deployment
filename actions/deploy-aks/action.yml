name: Deploy AKS Module
inputs:
  ARM_CLIENT_ID:
    description: "Application ID"
    required: true
  ARM_CLIENT_SECRET:
    description: "Application ID"
    required: true
  ARM_SUBSCRIPTION_ID:
    description: "Application ID"
    required: true
  ARM_TENANT_ID:
    description: "Application ID"
    required: true
  RBAC_ENABLED: 
    description: "Enable RBAC"
    default: false
  DPL_SA_NAME:
    description: "Storage Account Name"
    required: true
  DPL_STORAGE_RG_NAME:
    description: "Resource Group Name"
    required: true
  STATE_BLOB_NAME:
    description: "State Blob Name"
    required: true
  STORAGE_DPL_CTNR_NAME:
    description: "Storage Deployment Container Name"
    required: true
  DPL_BLOB_NAME:
    description: "Storage Deployment Blob Name"
    required: true
  STORAGE_DPL_CTNR_SAS:
    description: "Storage SAS"
    required: true
  VNET_DPL_CTNR_SAS:
    description: "VNet SAS"
    required: true
  VNET_DPL_CTNR_NAME: 
    description: "VNet Deployment Container Name"
    required: true
  AKS_DPL_CTNR_SAS:
    description: "VNet SAS"
    required: true
  AKS_DPL_CTNR_NAME: 
    description: "VNet Deployment Container Name"
    required: true

runs:
  using: "composite"
  steps:
    # - name: Checkout code 
    #   uses: actions/checkout@v3
    #   with:
    #     repository: 'gfortil/opinionated-terraform-azurerm-hpcc'
    #     token: ${{ inputs.GIT_TOKEN }}
    #     path: 'https://github.com/gfortil/terraform-azurerm-aks.git?ref=OSS'

    # - name: Set up Git credentials
    #   run: |
    #     git config --global credential.helper store
    #     git config --global credential.username ${{ inputs.GIT_TOKEN }}
    #   shell: bash

     ## Install a community package that adds the azcopy tool
    - name: Install azcopy
      uses: kheiakiyama/install-azcopy-action@v1.0.3
      with:
        version: 'v10'

    - name: Copy config.json of the vnet deployment from the vnet container to local directory ../vnet/data
      working-directory: ./examples/sequential/vnet
      run: |
        mkdir -p ./data
        touch ./data/config.json
        azcopy_v10 copy "https://deploymentsa2.blob.core.windows.net/${{inputs.VNET_DPL_CTNR_NAME}}/${{inputs.DPL_BLOB_NAME}}?${{ inputs.VNET_DPL_CTNR_SAS }}" "./data/config.json" || echo "Failed to copy data. File not found."
        ls -lart ./data
        cat ./data/config.json
      shell: bash

    - name: Copy config.json of the external storage deployment from the storage container to local directory ./data
      working-directory: ./examples/sequential/storage
      run: |
        mkdir -p ./data
        touch ./data/config.json
        azcopy_v10 copy "https://deploymentsa2.blob.core.windows.net/${{inputs.STORAGE_DPL_CTNR_NAME}}/${{inputs.DPL_BLOB_NAME}}?${{ inputs.STORAGE_DPL_CTNR_SAS }}" "./data/config.json" --recursive || echo "Failed to copy data. File not found."
      shell: bash

    - name: Copy config.json of the aks deployment from the storage container to local directory ./data
      working-directory: ./examples/sequential/aks
      run: |
        mkdir -p ./data
        touch ./data/config.json
        azcopy_v10 copy "https://deploymentsa2.blob.core.windows.net/${{inputs.AKS_DPL_CTNR_NAME}}/${{inputs.DPL_BLOB_NAME}}?${{ inputs.AKS_DPL_CTNR_SAS }}" "./data/config.json" --recursive || echo "Failed to copy data. File not found."
      shell: bash

    - name: Copy tfvars files from the aks container to local
      working-directory: ./examples/sequential/aks
      run: |
        touch misc.auto.tfvars
        touch aks.auto.tfvars
        azcopy_v10 copy "https://deploymentsa2.blob.core.windows.net/${{inputs.AKS_DPL_CTNR_NAME}}/misc.auto.tfvars?${{ inputs.AKS_DPL_CTNR_SAS }}" "./misc.auto.tfvars" --recursive || echo "Failed to copy data. File not found."
        azcopy_v10 copy "https://deploymentsa2.blob.core.windows.net/${{inputs.AKS_DPL_CTNR_NAME}}/aks.auto.tfvars?${{ inputs.AKS_DPL_CTNR_SAS }}" "./aks.auto.tfvars" --recursive || echo "Failed to copy data. File not found."
      shell: bash

    # - name: Copy misc.auto.tfvars.example
    #   working-directory: ./examples/sequential/aks
    #   run: cp misc.auto.tfvars.example misc.auto.tfvars
    #   shell: bash

    # - name: Copy aks.auto.tfvars.example
    #   working-directory: ./examples/sequential/aks
    #   run: cp aks.auto.tfvars.example aks.auto.tfvars
    #   shell: bash

    - name: Export secrets and vars as environment variables if using RBAC
      if: ${{ inputs.RBAC_ENABLED }} == true
      working-directory: ./examples/sequential/aks
      run:  | 
        export ARM_CLIENT_ID=${{ inputs.ARM_CLIENT_ID }} 
        export ARM_CLIENT_SECRET=${{ inputs.ARM_CLIENT_SECRET }} 
        export ARM_SUBSCRIPTION_ID=${{ inputs.ARM_SUBSCRIPTION_ID }} 
        export ARM_TENANT_ID=${{ inputs.ARM_TENANT_ID }}
        export ARM_USE_AZUREAD=true
        export ARM_USE_OIDC=true
        export TF_VAR_dpl_sa_name=${{ inputs.DPL_SA_NAME }}
        export TF_VAR_aks_dpl_ctnr_name=${{ inputs.AKS_DPL_CTNR_NAME }}
        export TF_VAR_dpl_blob_name=${{ inputs.DPL_BLOB_NAME }}
      shell: bash

    - name: Initialize Terraform
      working-directory: ./examples/sequential/aks
      run: terraform init -backend-config="resource_group_name=${{ inputs.DPL_STORAGE_RG_NAME }}" -backend-config="storage_account_name=${{ inputs.DPL_SA_NAME }}" -backend-config="container_name=${{ inputs.AKS_DPL_CTNR_NAME }}" -backend-config="key=${{ inputs.STATE_BLOB_NAME }}" -reconfigure
      shell: bash
      env:
        ARM_CLIENT_ID: ${{ inputs.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.ARM_TENANT_ID }}
        # GH_TOKEN: ${{ inputs.GH_TOKEN }}

    # - name: GitHub login
    #   run: |
    #     gh auth login --with-token < ${{ inputs.GIT_TOKEN }}
    #     gh auth login --git-protocol ssh --hostname https://github.com/
    #   shell: bash

    - name: Apply Terraform configuration
      working-directory: ./examples/sequential/aks
      run: terraform apply -auto-approve
      shell: bash
      env:
        ARM_CLIENT_ID: ${{ inputs.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.ARM_TENANT_ID }}
        TF_VAR_dpl_sa_name: ${{ inputs.DPL_SA_NAME }}
        TF_VAR_aks_dpl_ctnr_name: ${{ inputs.AKS_DPL_CTNR_NAME }}
        TF_VAR_dpl_blob_name: ${{ inputs.DPL_BLOB_NAME }}
